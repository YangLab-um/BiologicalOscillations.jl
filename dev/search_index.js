var documenterSearchIndex = {"docs":
[{"location":"models/elowitz_2000/#elowitz_2000","page":"Elowitz & Leibler 2000 - Repressilator","title":"Elowitz & Leibler 2000 - Repressilator","text":"","category":"section"},{"location":"models/elowitz_2000/","page":"Elowitz & Leibler 2000 - Repressilator","title":"Elowitz & Leibler 2000 - Repressilator","text":"elowitz_2000","category":"page"},{"location":"models/elowitz_2000/#BiologicalOscillations.elowitz_2000","page":"Elowitz & Leibler 2000 - Repressilator","title":"BiologicalOscillations.elowitz_2000","text":"elowitz_2000\n\nGeneralized Repressilator model based on Elowitz and Leibler 2000 Nature article. \n\n\n\n\n\n","category":"constant"},{"location":"models/elowitz_2000/","page":"Elowitz & Leibler 2000 - Repressilator","title":"Elowitz & Leibler 2000 - Repressilator","text":"using Catalyst, DifferentialEquations, Plots, Latexify\n\nelowitz_2000 = @reaction_network Elowitz_2000 begin\n    hillr(P₃,α₃,K₃,n₃), ∅ --> m₁\n    hillr(P₁,α₁,K₁,n₁), ∅ --> m₂\n    hillr(P₂,α₂,K₂,n₂), ∅ --> m₃\n    (δ₁,γ₁), m₁ <--> ∅\n    (δ₂,γ₂), m₂ <--> ∅\n    (δ₃,γ₃), m₃ <--> ∅\n    β₁, m₁ --> m₁ + P₁\n    β₂, m₂ --> m₂ + P₂\n    β₃, m₃ --> m₃ + P₃\n    μ₁, P₁ --> ∅\n    μ₂, P₂ --> ∅\n    μ₃, P₃ --> ∅\nend\n\nstruct LaTeXEquation\n    content::String\nend\n\nfunction Base.show(io::IO, ::MIME\"text/latex\", x::LaTeXEquation)\n    # Wrap in $$ for display math printing\n    return print(io, \"\\$\\$ \" * x.content * \" \\$\\$\")\nend\n\nLatexify.set_default(; starred=true)\n\npmap  = (:α₁ => 5e-1, :α₂ => 5e-1, :α₃ => 5e-1,\n         :K₁ => 40, :K₂ => 40, :K₃ => 40,  \n         :n₁ => 2, :n₂ => 2, :n₃ => 2, \n         :δ₁ => 2.5e-3, :δ₂ => 2.5e-3, :δ₃ => 2.5e-3,\n         :γ₁ => 5e-3, :γ₂ => 5e-3, :γ₃ => 5e-3, \n         :β₁ => 5e-2, :β₂ => 5e-2, :β₃ => 5e-2, \n         :μ₁ => 5e-3, :μ₂ => 5e-3, :μ₃ => 5e-3)\nu₀map = [:m₁ => 0., :m₂ => 0., :m₃ => 0., :P₁ => 20., :P₂ => 0., :P₃ => 0.]\ntspan = (0., 10000.)\noprob = ODEProblem(elowitz_2000, u₀map, tspan, pmap)\nsol = solve(oprob, Tsit5(), saveat=10.)","category":"page"},{"location":"models/elowitz_2000/","page":"Elowitz & Leibler 2000 - Repressilator","title":"Elowitz & Leibler 2000 - Repressilator","text":"In contrast to the original model, this implementation has independent parameters for each mRNA and protein pair:","category":"page"},{"location":"models/elowitz_2000/","page":"Elowitz & Leibler 2000 - Repressilator","title":"Elowitz & Leibler 2000 - Repressilator","text":"odesys = convert(ODESystem, elowitz_2000) # hide\neq = latexify(odesys) # hide\nLaTeXEquation(eq) # hide","category":"page"},{"location":"models/elowitz_2000/","page":"Elowitz & Leibler 2000 - Repressilator","title":"Elowitz & Leibler 2000 - Repressilator","text":"where ","category":"page"},{"location":"models/elowitz_2000/","page":"Elowitz & Leibler 2000 - Repressilator","title":"Elowitz & Leibler 2000 - Repressilator","text":"texthillr(P(t) alpha K n) = alpha fracK^nP(t)^n + K^n","category":"page"},{"location":"models/elowitz_2000/","page":"Elowitz & Leibler 2000 - Repressilator","title":"Elowitz & Leibler 2000 - Repressilator","text":"Using parameters ","category":"page"},{"location":"models/elowitz_2000/","page":"Elowitz & Leibler 2000 - Repressilator","title":"Elowitz & Leibler 2000 - Repressilator","text":"beginaligned\nalpha_1 = alpha_2 = alpha_3 = 05 \nbeta_1 = beta_2 = beta_3 = 005 \ngamma_1 = gamma_2 = gamma_3 = 0005 \ndelta_1 = delta_2 = delta_3 = 00025 \nK_1 = K_2 = K_3 = 40 \nn_1 = n_2 = n_3 = 2 \nmu_1 = mu_2 = mu_3 = 0005\nendaligned","category":"page"},{"location":"models/elowitz_2000/","page":"Elowitz & Leibler 2000 - Repressilator","title":"Elowitz & Leibler 2000 - Repressilator","text":"Under the initial condition","category":"page"},{"location":"models/elowitz_2000/","page":"Elowitz & Leibler 2000 - Repressilator","title":"Elowitz & Leibler 2000 - Repressilator","text":"beginaligned\nm_1(0) = m_2(0) = m_3(0) = 00 \nP_1(0) = 200 \nP_2(0) = P_3(0) = 00\nendaligned","category":"page"},{"location":"models/elowitz_2000/","page":"Elowitz & Leibler 2000 - Repressilator","title":"Elowitz & Leibler 2000 - Repressilator","text":"we obtain:","category":"page"},{"location":"models/elowitz_2000/","page":"Elowitz & Leibler 2000 - Repressilator","title":"Elowitz & Leibler 2000 - Repressilator","text":"plot(sol) # hide","category":"page"},{"location":"#BiologicalOscillations.jl-Documentation","page":"Home","title":"BiologicalOscillations.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BiologicalOscillations is a computational package for researchers studying biological oscillations. The package implements published mathematical models of oscillatory phenomena in a wide variety of areas such as cell cycle dynamics, circadian rhythms, synthetic biology, and embryonic development. The implementation leverages several tools across the Julia SciML ecosystem such as Catalyst.jl, DSP.jl, and DifferentialEquations.jl. ","category":"page"}]
}
